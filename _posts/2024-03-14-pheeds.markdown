---
title:  "Pheeds"
date:   2024-05-14 22:26:08 +0000
---

On previous posts I shared what [I found about Elixr]({% post_url 2024-02-27-elixir_intro %}) while trying to learn [how Phoenix works]({% post_url 2024-03-05-phoenix %}), all this was for building **"Pheeds"** (_Ph_oenix + f_eeds_): a simple RSS feeds reader that allows the user to add sources of type RSS, Atom or any other static HTML page and it will automatically refresh every now and then.

The _"killer feature"_ here is the HTML support which is done by allowing to configure a couple of XPath expressions to extract the content of the page during the sync process. But it has more, it make heavy use of [LiveView]({% post_url 2024-03-05-phoenix %}#liveview)s... well, all view are _live_ which proby is not the best approach.

Any way, the app is really simple and honestly was a blast to build. Every time I had to do something outside of the main task it always worked at the first try, is also true that getting through the Phoenix docs initially is a PITA to the point that it was the drop that spilled the glass for me to start this blog!

## Conclusions

My overall conclusion of this experience was that we should use this kind of tool more, or at least consider them more ofthen. I get that every project as a budget and we as providers try to factor that in when considering the tools we are going to use, If I would to purpose Phoenix to one client I can hear their thoughts rumbling _"you sure, I would need to retain my team or hire new people? how hard would that be? Why not just use React + FastAPI or Spring? Would that be REALLY that bad?"_ All equaly valid and important questions, thing is that there are cases where the tools are not optional for whatever godd reasons and others when we as experts should help the client decide.

For the Elixit + Phonenix combination there are some specific cases where these tools shine, anything related to near-real-time interactions with with many (thousands, millions) concurrent users is the perfect case. Those kind of systems where the reason why Erlan was invented 40 years ago and that's why [Discord used Elixr to handled 5 million concurrent users](https://discord.com/blog/how-discord-scaled-elixir-to-5-000-000-concurrent-users) and more recently [Veeps migrated to Elixir + Phoenix to handle live events streaming](https://elixir-lang.org/blog/2024/03/05/veeps-elixir-case/) only requiring a team of 4 people.

But even for other cases I found Phoenix to be a good general purpose framework whith a great development evironemnt and I think we could extend it's realm so more outside of that super specific use cases. At least for me it makes a lot of scense to for building APIs, Phoenix has some nice features to bootstrap formal "REST resources" and [Ecto](https://hexdocs.pm/ecto/getting-started.html) is great to manage database access (explainig those for future posts).

### Simple vs Easy

During the weeks I spend working on this I have always this idea in the back of my mind, Elixir and Phoenix are not easy pieces of technilogy but they are really simple. As [I mentioend before]({% post_url 2024-02-27-elixir_intro%}#simple-made-easy) Elixir in particular is a simple language with a simpler working environment, I was able to produce non-trivial programs within days and I strech to the more complex ones, like multi-node Elixir clusters, without moving my hands out of the keyborad. That for me is _the_ secret wapon of this development environment: is super powerful and yet super simple.

Phoenix is a little more sofisticated, it's a big framework that has one tool for each job you could posible face while working on any kind of web based solutions. It's opinionated in the way it manage configuration and migrations and I found their opinions to match mine so 👌 but even if that's not the case for you it's great to have a starting point to take a more informed desicion of what could be a "right" way to do things. The part I found confusing at the beginning is that all the plumbing building your app is based on macros (Elixir has macros 😐) so it can be hard to understand, once you can spot _what's a macro and what's not_ in your code that poblem goes away. 

So, why I never say Elixir or Phoenix before in the wild during the last 20 years I have being working here?

The explanains I think is that we tend to choose the _easy_ path when we need to pick a tool just because it's easy before even trying to think twice. I get that we all want to do our job and get back to our lifes without make every day a nigthmere, but I also believe that's a recipe for mediocrity and I don't want that for me. More so I think that choosing the easy path automatically has more drawbacks:
- Don't take advantage of new thecnilogies (my last 3 or 4 Java projects used JDK 20 but no new features: no records, no var, etc)
- Get swamped in the same things we know to the point that is hard to spot new ideas/solutions
- Suffer of the _"if all you have is a hammer, everything looks like a nail"_ disease, and you end up using JavaScript to write REST APIs
- Waste a chance to learn something new and get paid for it

## Inverted Conway's Law

Melvin Conway (not to be confused with John Conway) stated this law in [a publication I highly recommend reading](http://www.melconway.com/Home/pdf/committees.pdf):
> Organizations which design systems (in the broad sense used here) are constrained to produce designs which are copies of the communication structures of these organizations.

I found this to be an acurate description of my experience so far in the field and I can see the ramifications of the culture of a company affecting design and implementation desicion to 

Thinking about the impact of the tools we use have 
what tool to choose this is something I usually overlook but I think it makes a lot o sense, on our rush to pick the _easy_ path we will keep talking about our implementations always in the same terms that we arleady know. Think about `git` for example, can you imagine working on a codebase without using branches and commits? I certanly not, even being the case that I didn't use `git` during many years. This for me is a read flag about how importnat is try new things as a team, t

That put us on a hard possition to suggest anything new or out of the box

Pushing this idea a little further I landing in the conclusion that the tools we choose to solve a problem will affect the design of the systems they are going to inahbit in some unexpected ways:
- Shaping conversations between developers
- 